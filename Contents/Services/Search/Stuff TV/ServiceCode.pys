BASE_URL = "http://www.stuff.tv"
SEARCH_URL = "http://www.stuff.tv/search/video?search=%s"

def Search(query):

	# Compute the URL and download the HTML
	url = SEARCH_URL % String.Quote(query)
	search_page = HTML.ElementFromURL(url)
	search_page_initial_node = search_page.xpath('//div[@class="inner-container"]/h2[contains(text(), "Stuff Video")]/..')[0]
	search_results = search_page_initial_node.xpath('//li[contains(concat(" ", normalize-space(@class), " "), " product")]')

	oc = ObjectContainer()

	for item in search_results:
		try:
			# Attempt to determine the title
			title = item.xpath('.//h3/a/text()')[0]

			# Attempt to determine the absolue URL to the page
			relative_url = item.xpath('.//h3/a/@href')[0]
			url = '%s%s' % (BASE_URL, relative_url)

			# [Optional] - Attempt to determine the thumbnail
			try:
				thumb_url = item.xpath('.//a/img/@src')[0]
				thumb = thumb_url.replace('/imagecache/video_thumb/', '/').replace('/imagecache/review_thumb/', '/')
			except: thumb = ''

			# [Optional] - Attempt to create a sensible description
			try:
				date = item.xpath('.//p[@class="meta"]/span/text()')[0]
				type = info.xpath('.//p[@class="meta"]/text()')[0]
				description = '%s | %s' % (date, type)
			except: description = None

			# Add details of the located video clip
			oc.add(VideoClipObject(
				title = title,
				summary = description,
				thumb = Resource.ContentsOfURLWithFallback(thumb),
				url = url
			))

		except:
			Log.Exception("Exception adding video result")

	return oc
